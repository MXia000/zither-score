type User 
  @model 
  @auth(rules: [
    { allow: owner, ownerField: "id" },
    { allow: groups, groups: ["Admin"] }
    { allow: groups, groups: ["User"], operations: [read] }]) {
  id: ID!
  username: String! 
  email: String!
  scores: [Score] @connection(name: "UserScores", sortField: "createdAt")
  group: String!
}

type Score @model {
  id: ID!
  name: String
  notes: [Note] @connection(name: "ScoreNotes")
  user: User @connection(name: "UserScores", sortField: "createdAt")
  createdAt: String
  updatedAt: String
  status: ScoreStatus
  category: String!
}

type Comment @model {
  id: ID!
  content: String
  createdAt: String
  rating: Int
  userId: String!
  scoreId: String!
  replies: [Reply] @connection(name: "CommentReplies", sortField: "createdAt")
}

type Reply @model {
  id: ID!
  content: String
  createdAt: String
  comment: Comment @connection(name: "CommentReplies", sortField: "createdAt")
  userId: String!
}

enum ScoreStatus {
  PRIVATE
  PUBLIC
}

type Note @model {
  id: ID!
  number: Int
  dot: dotStatus
  doubleDot: dotStatus
  line: Boolean
  doubleLine: Boolean
  position: [Int]!
  score: Score @connection(name: "ScoreNotes")
  scoreId: String!
}

enum dotStatus {
  TOP
  BOTTOM
}

type Feedback @model {
  id: ID!
  name: String!
  email: String!
  comment: String!
  createdAt: String
  status: String!
}